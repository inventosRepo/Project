// player_variables
var tank;
var player_live = false;
var bullets = [];

// npc_variables
var npc_count = 2;
var npc_tank = [];
var npc_live = [];
var npc_tank_cell_x = [];
var npc_tank_cell_y = [];
var npc_bullet_cell_x = [];
var npc_bullet_cell_y = [];
var npc_bullets = [];
for (var i = 0; i < npc_count; i++){
  npc_bullets[i] = [];
}
var offset = 0;

// scene_variables
var canvas, context;
var img_brick, img_steel, img_water, img_forest, img_tank;
var cell_size = 24;
var x_count = 26;
var y_count = 26;
var tank_width = 48;
var tank_heigth = 48;

// connection_variables
var host;
var socket = [];

// Objects
function Tank_object (image) {
  this.w = tank_width;
  this.h = tank_heigth;
  this.i = 1;
  this.image = image;
}

function Tank (x, y) {
  this.x = x;
  this.y = y;
}

function Bullet(direct, bull_x, bull_y, bulltype) {
  this.direct = direct;
  this.bull_x = bull_x;
  this.bull_y = bull_y;
  this.bulltype = bulltype;
}

function clear() {
  context.clearRect(0, 0, canvas.width, canvas.height);
}

//npc_draw_function
function draw_npc() {
    for (var j = 0; j < npc_tank.length; j++) {
      if ((npc_live[j] == true) && (npc_tank[j] != null)) {
      context.drawImage(npc_tank[j].image, npc_tank[j].i*npc_tank[j].w, 0,
                        npc_tank[j].w, npc_tank[j].h, npc_tank[j].x, npc_tank[j].y,
                        npc_tank[j].w, npc_tank[j].h);
      for (var i = 0; i < npc_bullets[j].length; i++) {
        context.drawImage(img_bullet, npc_bullets[j][i].bull_x,  npc_bullets[j][i].bull_y);
      }
    }
  }
}

//player_draw_fucntion
function draw_player() {
  if (player_live == true) {
    context.drawImage(tank.image, tank.i*tank.w, 0,
                      tank.w, tank.h, tank.x, tank.y,
                      tank.w, tank.h);
  }
  for (var i = 0; i < bullets.length; i++) {
    context.drawImage(img_bullet, bullets[i].bull_x,  bullets[i].bull_y);
  }
}

//full scene draw function
function draw_scene() {
  clear();

  context.fillStyle = '#111';
  context.fillRect(0, 0, canvas.width, canvas.height);
  context.save();

  for (var y = 0; y < y_count; y++) {
    for (var x = 0; x < x_count; x++) {
      switch (level_map[y][x]) {
        case 0:
          break;
        case 1:
          context.drawImage(img_brick, 0, 0, cell_size, cell_size, x*cell_size, y*cell_size, cell_size, cell_size);
          break;
        case 2:
          context.drawImage(img_steel, 0, 0, cell_size, cell_size, x*cell_size, y*cell_size, cell_size, cell_size);
          break;
        case 3:
          context.drawImage(img_forest, 0, 0, cell_size, cell_size, x*cell_size, y*cell_size, cell_size, cell_size);
          break;
        case 4:
          context.drawImage(img_water, 0, 0, cell_size, cell_size, x*cell_size, y*cell_size, cell_size, cell_size);
          break;
      }
    }
  }
  context.restore();

  move_bullets();
  move_npc_bullets();
  draw_player();
  draw_npc();
}

$(function() {
  //connection init
  host = "ws://"+window.location.hostname.toString()+":"+port;
  socket[current_id] = new WebSocket (host);
  //canvas init
  canvas = document.getElementById('map');
  canvas.width  = x_count * cell_size;
  canvas.height = y_count * cell_size;
  context = canvas.getContext('2d');
  //loading images
  img_brick = new Image();
  img_brick.src = '<%= asset_path("brick.png") %>';
  img_steel = new Image();
  img_steel.src = '<%= asset_path("steel.png") %>';
  img_water = new Image();
  img_water.src = '<%= asset_path("water.png") %>';
  img_forest = new Image();
  img_forest.src = '<%= asset_path("forest.png") %>';
  img_bullet = new Image();
  img_bullet.src = '<%= asset_path("bullet.png") %>';
  img_tank = new Image();
  img_tank.src = '<%= asset_path("tank.png") %>';

  var tank = new Tank_object(img_tank);
  Tank.prototype = tank;

  //npc_spawn
  for (var i = 0; i < npc_count; i++) {
    npc_live[i] = true;
    npc_tank[i] = new Tank (offset, 0);
    offset+=cell_size * 2;
  }
  connect(); //connect to WebSocket

  setInterval(draw_scene, 50); //redraw scene every 50 ms
  setInterval(npc_movement, 1000);
  setInterval(npc_shot, 1500);
});
